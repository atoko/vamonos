akka {
  coordinated-shutdown.exit-jvm = on

  actor {
    provider = "cluster"

    serialization-bindings {
      "org.atoko.call4code.entrado.actors.activity.ActivityCommands$Command" = jackson-json
      "org.atoko.call4code.entrado.actors.activity.ActivityEvents$Event" = jackson-json
      "org.atoko.call4code.entrado.actors.activity.ActivityActor$State" = jackson-json
      "org.atoko.call4code.entrado.actors.person.PersonCommands$Command" = jackson-json
      "org.atoko.call4code.entrado.actors.person.PersonEvents$Event" = jackson-json
      "org.atoko.call4code.entrado.actors.person.PersonActor$State" = jackson-json
      "org.atoko.call4code.entrado.actors.meta.DeviceSupervisor$Event" = jackson-json
    }


  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 30s
    seed-nodes = ["akka://root-system@127.0.0.1:2551"]
    sharding {
      state-store-mode = persistence
      remember-entities = on
    }

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s
  }

  persistence {

    journal {

      # Maximum size of a persistent message batch written to the journal.
      max-message-batch-size = 200

      # Maximum size of a confirmation batch written to the journal.
      max-confirmation-batch-size = 10000

      # Maximum size of a deletion batch written to the journal.
      max-deletion-batch-size = 10000

      auto-start-journals = ["pg-journal"]

      # Path to the journal plugin to be used
      plugin = "pg-journal"
    }

    snapshot-store {

      # Path to the snapshot store plugin to be used
      plugin = "pg-snapshot"

      auto-start-journals = ["pg-snapshot"]

      # Local filesystem snapshot store plugin.
      local {

        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"

        # Storage location of snapshot files.
        dir = "data/snapshots"
      }
    }

    view {

      # Automated incremental view update.
      auto-update = on

      # Interval between incremental updates
      auto-update-interval = 5s

      # Maximum number of messages to replay per incremental view update. Set to
      # -1 for no upper limit.
      auto-update-replay-max = -1
    }

    at-least-once-delivery {
      # Interval between redelivery attempts
      redeliver-interval = 5s

      # After this number of delivery attempts a `ReliableRedelivery.UnconfirmedWarning`
      # message will be sent to the actor.
      warn-after-number-of-unconfirmed-attempts = 5

      # Maximum number of unconfirmed messages that an actor with AtLeastOnceDelivery is
      # allowed to hold in memory.
      max-unconfirmed-messages = 100000
    }

    dispatchers {
      default-plugin-dispatcher {
        type = PinnedDispatcher
        executor = "thread-pool-executor"
      }
      default-replay-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
      default-stream-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
    }
  }
}

pg-persistence {
  db {
    user = "${POSTGRES_DB_USERNAME"
    password = "${POSTGRES_DB_PASSWORD}"
    url = "${POSTGRES_DB_URL}"
  }
}

akka.persistence.journal.leveldb {
  # Class name of the plugin.
  class = "akka.persistence.journal.leveldb.LeveldbJournal"
  # Dispatcher for the plugin actor.
  plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
  # Dispatcher for message replay.
  replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
  # Storage location of LevelDB files.
  dir = "data/journal"
  # Use fsync on write.
  fsync = on
  # Verify checksum on read.
  checksum = off
  # Native LevelDB (via JNI) or LevelDB Java port.
  native = on
  # Number of deleted messages per persistence personEntity that will trigger journal compaction
  compaction-intervals {
  }
}